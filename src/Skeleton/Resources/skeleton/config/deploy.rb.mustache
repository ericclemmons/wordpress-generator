begin
    require "capistrano"
    require "capistrano/ext/multistage"
    require "colored"
rescue LoadError
  puts "You need to run: $ sudo gem install capifony capistrano-ext colored"
  exit
end


set :stage_dir,         "deploy"

set :application,       "{{domain}}"
set :repository,        "{{repository}}"
set :scm,               :git

set :deploy_to,         "/var/www/#{application}"
set :deploy_via,        :remote_cache
set :group_writable,    true
set :use_sudo,          true

set :public_children,   []
set :shared_children,   %w(vendor/wordpress/wordpress/wp-content/uploads)

set :keep_releases,     5

default_run_options[:pty] = true

pretty_errors

before "deploy:setup" do
    pretty_print "Setting up deployment structure"
end

after "deploy:setup" do
    puts_ok
end

before "deploy:update" do
    pretty_print "Starting \"#{stage}\" deployment"
    puts_ok
end

before "deploy:update_code" do
  msg = "Updating code base with via #{deploy_via}"

  if logger.level == Logger::IMPORTANT
    pretty_errors
    puts msg
  else
    puts msg.green
  end
end

after "deploy:finalize_update" do
    pretty_print "Loading WordPress Skeleton"
    run "cd #{latest_release} && ./skeleton"
    puts_ok
end

after "deploy:finalize_update", "wp:symlink"

after "deploy:update",          "wp:plugins:install"
after "deploy:update",          "wp:theme:activate"
after "deploy:update",          "deploy:vhost"

after "deploy:update" do
    pretty_print "Finishing \"#{stage}\" deployment"
    puts_ok
end

after "deploy:setup" do
    dirs = [deploy_to, releases_path, shared_path]
    dirs += shared_children.map { |d| File.join(shared_path, d.split('/').last) }

    run "#{try_sudo} chown #{user} #{dirs.join(' ')}"
end

namespace :deploy do
    task :cold do
        after "deploy:finalize_update", "wp:db:create"
        after "deploy:finalize_update", "wp:install"

        setup
        update
        start
    end

    task :restart, :roles => :web do
        pretty_print "Gracefully restarting Apache"
        invoke_command "#{try_sudo} /etc/init.d/apache2 graceful"
        puts_ok
    end

    task :start, :roles => :web do
        pretty_print "Starting Apache"
        invoke_command "#{try_sudo} /etc/init.d/apache2 start"
        puts_ok
    end

    task :stop, :roles => :web do
        pretty_print "Stopping Apache"
        invoke_command "#{try_sudo} /etc/init.d/apache2 stop"
        puts_ok
    end

    task :vhost do
        vhost   = "#{stage}.#{application}"
        source  = "#{latest_release}/config/vhost/#{vhost}"
        target  = "/etc/apache2/sites-enabled/#{vhost}"

        pretty_print "Symlinking #{stage} vhost"
        run "#{try_sudo} ln -nfs #{source} #{target}"
        puts_ok
    end
end
